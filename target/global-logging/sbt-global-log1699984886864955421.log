[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\KRyzhov\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\KRyzhov\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (Oracle Corporation Java 1.8.0_311)
[debug]       Load.loadUnit: plugins took 88.5232ms
[debug]       Load.loadUnit: defsScala took 0.275ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.6242 ms
[debug]           Load.resolveProject(global-plugins) took 44.4667ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\KRyzhov\.sbt\1.0\plugins, plugins: List(<none>))) took 85.2459ms
[debug] [Loading] Done in C:\Users\KRyzhov\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 105.4018ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2249ms
[debug]     Load.loadUnit(file:/C:/Users/KRyzhov/.sbt/1.0/plugins/, ...) took 201.5817ms
[debug]   Load.apply: load took 377.94ms
[debug]   Load.apply: resolveProjects took 6.9511ms
[debug]   Load.apply: finalTransforms took 53.1801ms
[debug]   Load.apply: config.delegates took 8.9815ms
[debug]   Load.apply: Def.make(settings)... took 369.9347ms
[debug]   Load.apply: structureIndex took 86.6899ms
[debug]   Load.apply: mkStreams took 1.5261ms
[info] loading global plugins from C:\Users\KRyzhov\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4404.2441ms
[debug]           Load.loadUnit: plugins took 29.2879ms
[debug]           Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\IdeaProjects\test\project
[debug]             Load.loadUnit: mkEval took 9.8828ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4474 ms
[info] loading settings for project test-build from idea.sbt ...
[debug]               Load.resolveProject(test-build) took 3.6854ms
[debug]             Load.loadTransitive: finalizeProject(Project(id test-build, base: C:\Users\KRyzhov\IdeaProjects\test\project, plugins: List(<none>))) took 5.725ms
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test\project, returning: (test-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2008.7909ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.4201ms
[debug]         Load.loadUnit(file:/C:/Users/KRyzhov/IdeaProjects/test/project/, ...) took 2044.734ms
[debug]       Load.apply: load took 2046.3244ms
[debug]       Load.apply: resolveProjects took 0.1433ms
[debug]       Load.apply: finalTransforms took 6.1549ms
[debug]       Load.apply: config.delegates took 0.2546ms
[debug]       Load.apply: Def.make(settings)... took 77.7019ms
[debug]       Load.apply: structureIndex took 18.0178ms
[debug]       Load.apply: mkStreams took 0.0037ms
[info] loading project definition from C:\Users\KRyzhov\IdeaProjects\test\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4045.7528ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\IdeaProjects\test
[debug]       Load.loadUnit: mkEval took 0.678ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4579 ms
[info] loading settings for project test from build.sbt ...
[debug]         Load.resolveProject(test) took 26.8261ms
[debug]       Load.loadTransitive: finalizeProject(Project(id test, base: C:\Users\KRyzhov\IdeaProjects\test, plugins: List(<none>))) took 29.4198ms
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test, returning: (test)
[debug]     Load.loadUnit: loadedProjectsRaw took 1104.1885ms
[debug]     Load.loadUnit: cleanEvalClasses took 13.4291ms
[debug]   Load.loadUnit(file:/C:/Users/KRyzhov/IdeaProjects/test/, ...) took 5164.3414ms
[debug] Load.apply: load took 5165.8763ms
[debug] Load.apply: resolveProjects took 0.0874ms
[debug] Load.apply: finalTransforms took 19.6756ms
[debug] Load.apply: config.delegates took 0.2219ms
[debug] Load.apply: Def.make(settings)... took 60.5304ms
[debug] Load.apply: structureIndex took 14.8089ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to test (in build file:/C:/Users/KRyzhov/IdeaProjects/test/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58830 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58830, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to test (in build file:/C:/Users/KRyzhov/IdeaProjects/test/)
[debug] > Exec(idea-shell, None, None)
