[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\KRyzhov\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\KRyzhov\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (Oracle Corporation Java 1.8.0_311)
[debug]       Load.loadUnit: plugins took 134.281ms
[debug]       Load.loadUnit: defsScala took 0.4302ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.7462 ms
[debug]           Load.resolveProject(global-plugins) took 63.9114ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\KRyzhov\.sbt\1.0\plugins, plugins: List(<none>))) took 123.9771ms
[debug] [Loading] Done in C:\Users\KRyzhov\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 152.3243ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3369ms
[debug]     Load.loadUnit(file:/C:/Users/KRyzhov/.sbt/1.0/plugins/, ...) took 297.7485ms
[debug]   Load.apply: load took 539.9055ms
[debug]   Load.apply: resolveProjects took 8.813ms
[debug]   Load.apply: finalTransforms took 90.4608ms
[debug]   Load.apply: config.delegates took 10.2451ms
[debug]   Load.apply: Def.make(settings)... took 534.8959ms
[debug]   Load.apply: structureIndex took 94.7419ms
[debug]   Load.apply: mkStreams took 1.8521ms
[info] loading global plugins from C:\Users\KRyzhov\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3541.4257ms
[debug]           Load.loadUnit: plugins took 29.4329ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\IdeaProjects\test\project
[debug]             Load.loadUnit: mkEval took 8.1138ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7757 ms
[info] loading settings for project test-build from idea.sbt ...
[debug]               Load.resolveProject(test-build) took 8.81ms
[debug]             Load.loadTransitive: finalizeProject(Project(id test-build, base: C:\Users\KRyzhov\IdeaProjects\test\project, plugins: List(<none>))) took 11.2759ms
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test\project, returning: (test-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 143.4103ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.6917ms
[debug]         Load.loadUnit(file:/C:/Users/KRyzhov/IdeaProjects/test/project/, ...) took 179.6733ms
[debug]       Load.apply: load took 181.284ms
[debug]       Load.apply: resolveProjects took 0.1051ms
[debug]       Load.apply: finalTransforms took 7.5491ms
[debug]       Load.apply: config.delegates took 0.3783ms
[debug]       Load.apply: Def.make(settings)... took 95.9066ms
[debug]       Load.apply: structureIndex took 18.9877ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\KRyzhov\IdeaProjects\test\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 610.9312ms
[debug]     Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\IdeaProjects\test
[debug]       Load.loadUnit: mkEval took 0.4285ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2802 ms
[info] loading settings for project test from build.sbt,plugin.sbt ...
[debug]         Load.resolveProject(test) took 28.3724ms
[debug]       Load.loadTransitive: finalizeProject(Project(id test, base: C:\Users\KRyzhov\IdeaProjects\test, plugins: List(<none>))) took 32.1557ms
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test, returning: (test)
[debug]     Load.loadUnit: loadedProjectsRaw took 190.825ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.8227ms
[debug]   Load.loadUnit(file:/C:/Users/KRyzhov/IdeaProjects/test/, ...) took 810.3026ms
[debug] Load.apply: load took 812.2229ms
[debug] Load.apply: resolveProjects took 0.1317ms
[debug] Load.apply: finalTransforms took 22.4745ms
[debug] Load.apply: config.delegates took 0.3821ms
[debug] Load.apply: Def.make(settings)... took 71.3378ms
[debug] Load.apply: structureIndex took 19.75ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to test (in build file:/C:/Users/KRyzhov/IdeaProjects/test/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49800 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49800, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to test (in build file:/C:/Users/KRyzhov/IdeaProjects/test/)
[debug] > Exec(idea-shell, None, None)
