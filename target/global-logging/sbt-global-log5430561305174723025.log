[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\KRyzhov\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\KRyzhov\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.2 (Oracle Corporation Java 1.8.0_311)
[debug]       Load.loadUnit: plugins took 86.0091ms
[debug]       Load.loadUnit: defsScala took 0.2767ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.0642 ms
[debug]           Load.resolveProject(global-plugins) took 45.1325ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\KRyzhov\.sbt\1.0\plugins, plugins: List(<none>))) took 85.4851ms
[debug] [Loading] Done in C:\Users\KRyzhov\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 104.4557ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2423ms
[debug]     Load.loadUnit(file:/C:/Users/KRyzhov/.sbt/1.0/plugins/, ...) took 199.2532ms
[debug]   Load.apply: load took 344.9592ms
[debug]   Load.apply: resolveProjects took 5.573ms
[debug]   Load.apply: finalTransforms took 49.4259ms
[debug]   Load.apply: config.delegates took 6.9168ms
[debug]   Load.apply: Def.make(settings)... took 355.8505ms
[debug]   Load.apply: structureIndex took 79.5365ms
[debug]   Load.apply: mkStreams took 1.5067ms
[info] loading global plugins from C:\Users\KRyzhov\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2359.626ms
[debug]           Load.loadUnit: plugins took 29.1302ms
[debug]           Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\IdeaProjects\test\project
[debug]             Load.loadUnit: mkEval took 7.709ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2791 ms
[info] loading settings for project test-build from idea1.sbt ...
[debug]               Load.resolveProject(test-build) took 7.2596ms
[debug]             Load.loadTransitive: finalizeProject(Project(id test-build, base: C:\Users\KRyzhov\IdeaProjects\test\project, plugins: List(<none>))) took 10.2317ms
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test\project, returning: (test-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 136.2355ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.341ms
[debug]         Load.loadUnit(file:/C:/Users/KRyzhov/IdeaProjects/test/project/, ...) took 170.8536ms
[debug]       Load.apply: load took 172.8502ms
[debug]       Load.apply: resolveProjects took 0.1161ms
[debug]       Load.apply: finalTransforms took 8.5521ms
[debug]       Load.apply: config.delegates took 0.3085ms
[debug]       Load.apply: Def.make(settings)... took 84.1258ms
[debug]       Load.apply: structureIndex took 23.5798ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\Users\KRyzhov\IdeaProjects\test\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 559.5061ms
[debug]     Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\KRyzhov\IdeaProjects\test
[debug]       Load.loadUnit: mkEval took 0.4157ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.1999 ms
[info] loading settings for project test from build.sbt ...
[debug]         Load.resolveProject(test) took 27.6121ms
[debug]       Load.loadTransitive: finalizeProject(Project(id test, base: C:\Users\KRyzhov\IdeaProjects\test, plugins: List(<none>))) took 32.3031ms
[debug] [Loading] Done in C:\Users\KRyzhov\IdeaProjects\test, returning: (test)
[debug]     Load.loadUnit: loadedProjectsRaw took 126.6194ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.5862ms
[debug]   Load.loadUnit(file:/C:/Users/KRyzhov/IdeaProjects/test/, ...) took 693.3319ms
[debug] Load.apply: load took 695.0526ms
[debug] Load.apply: resolveProjects took 0.1597ms
[debug] Load.apply: finalTransforms took 20.2369ms
[debug] Load.apply: config.delegates took 0.3566ms
[debug] Load.apply: Def.make(settings)... took 81.505ms
[debug] Load.apply: structureIndex took 19.8733ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to test (in build file:/C:/Users/KRyzhov/IdeaProjects/test/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 59162 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 59162, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to test (in build file:/C:/Users/KRyzhov/IdeaProjects/test/)
[debug] > Exec(idea-shell, None, None)
